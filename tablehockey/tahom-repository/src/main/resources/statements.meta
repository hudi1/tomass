SEQ=PARTICIPANT(OPT)=select auto_increment from information_schema.tables where table_name = 'participant';
SEQ=PLAY_OFF_GAME(OPT)=select auto_increment from information_schema.tables where table_name = 'play_off_game';
SEQ=GROUPS(OPT)=select auto_increment from information_schema.tables where table_name = 'groups';
SEQ=TOURNAMENT(OPT)=select auto_increment from information_schema.tables where table_name = 'tournament';
SEQ=TOURNAMENT_RATING(OPT)=select auto_increment from information_schema.tables where table_name = 'tournament_rating';
SEQ=STAGE(OPT)=select auto_increment from information_schema.tables where table_name = 'stage';
SEQ=USER(OPT)=select auto_increment from information_schema.tables where table_name = 'user';
SEQ=RATING_POINTS(OPT)=select auto_increment from information_schema.tables where table_name = 'rating_points';
SEQ=ITHF_TOURNAMENT(OPT)=select auto_increment from information_schema.tables where table_name = 'ithf_tournament';
SEQ=PLAYER(OPT)=select auto_increment from information_schema.tables where table_name = 'player';
SEQ=GAME(OPT)=select auto_increment from information_schema.tables where table_name = 'game';
SEQ=RATING(OPT)=select auto_increment from information_schema.tables where table_name = 'rating';
SEQ=TOURNAMENT_ADMIN(OPT)=select auto_increment from information_schema.tables where table_name = 'tournament_admin';
SEQ=PLAYING_FORMAT(OPT)=select auto_increment from information_schema.tables where table_name = 'playing_format';
SEQ=FINAL_STANDING(OPT)=select auto_increment from information_schema.tables where table_name = 'final_standing';

INSERT_FINAL_STANDING(CRUD,in=FinalStanding,out=FinalStanding,tab=finalStanding)=
  insert into %%final_standing (%ID, %PLAYER_ID, %FINAL_RANK, %TOURNAMENT_ID)
  {= values (:id(seq=FINAL_STANDING), :player.id, :finalRank, :tournament.id) }
;

GET_FINAL_STANDING(CRUD,in=FinalStanding,out=FinalStanding,tab=finalStanding=f,tab=player=p,tab=tournament=t)=
  select %f.ID @id(id), %f.PLAYER_ID @player.id(id), %f.FINAL_RANK @finalRank, %f.TOURNAMENT_ID @tournament.id(id)
         {? :player(call=toInit) | , %p.NAME @player.name, %p.SURNAME @player.surname(type=surname), %p.NICKNAME @player.nickname, %p.GENDER @player.gender, %p.DATE_OF_BIRTH @player.dateOfBirth, %p.COUNTRY @player.country, %p.CITY @player.city, %p.CLUB @player.club, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId, %p.NAME_ASCII @player.nameAscii, %p.SURNAME_ASCII @player.surnameAscii, %p.VERIFICATION @player.verification }
         {? :tournament(call=toInit) | , %t.NAME @tournament.name, %t.STATUS @tournament.status, %t.PLAYING_FORMAT_ID @tournament.playingFormat.id, %t.COUNTRY @tournament.country, %t.CITY @tournament.city, %t.ADDRESS @tournament.address, %t.LOGO @tournament.logo, %t.REGISTRATION_FROM @tournament.registrationFrom, %t.DATE @tournament.date, %t.REGISTRATION_TO @tournament.registrationTo, %t.VISIBLE @tournament.visible }
  from %%final_standing f
  {? :player(call=toInit) | left join %%player p on %f.PLAYER_ID = %p.ID }
  {? :tournament(call=toInit) | left join %%tournament t on %f.TOURNAMENT_ID = %t.ID }
  {= where
    {& %f.ID ::= :id }
    {& %f.PLAYER_ID ::= :player.id }
    {& %f.FINAL_RANK ::= :finalRank }
    {& %f.TOURNAMENT_ID ::= :tournament.id }
  }
;

UPDATE_FINAL_STANDING(CRUD,in=FinalStanding,out=FinalStanding,tab=finalStanding)=
  update %%final_standing
  {= set
    { ,%PLAYER_ID = :player.id(call=isDef) }
    { ,%FINAL_RANK = :finalRank(call=isDef) }
    { ,%TOURNAMENT_ID = :tournament.id(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_FINAL_STANDING(CRUD,in=FinalStanding,out=FinalStanding,tab=finalStanding)=
  delete from %%final_standing
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_FINAL_STANDING(QRY,in=FinalStanding,out=FinalStanding,tab=finalStanding=f,tab=player=p,tab=tournament=t)=
  select {? :onlyIds_ | %f.ID @id(id) |
    %f.ID @id(id), %f.PLAYER_ID @player.id(id), %f.FINAL_RANK @finalRank, %f.TOURNAMENT_ID @tournament.id(id)
    {? :player(call=toInit) | , %p.NAME @player.name, %p.SURNAME @player.surname(type=surname), %p.NICKNAME @player.nickname, %p.GENDER @player.gender, %p.DATE_OF_BIRTH @player.dateOfBirth, %p.COUNTRY @player.country, %p.CITY @player.city, %p.CLUB @player.club, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId, %p.NAME_ASCII @player.nameAscii, %p.SURNAME_ASCII @player.surnameAscii, %p.VERIFICATION @player.verification }
    {? :tournament(call=toInit) | , %t.NAME @tournament.name, %t.STATUS @tournament.status, %t.PLAYING_FORMAT_ID @tournament.playingFormat.id, %t.COUNTRY @tournament.country, %t.CITY @tournament.city, %t.ADDRESS @tournament.address, %t.LOGO @tournament.logo, %t.REGISTRATION_FROM @tournament.registrationFrom, %t.DATE @tournament.date, %t.REGISTRATION_TO @tournament.registrationTo, %t.VISIBLE @tournament.visible }
  }
  from %%final_standing f
  {? :player(call=toInit) | left join %%player p on %f.PLAYER_ID = %p.ID }
  {? :tournament(call=toInit) | left join %%tournament t on %f.TOURNAMENT_ID = %t.ID }
  {= where
    {& %f.ID ::= :id }
    {& %f.PLAYER_ID ::= :player.id }
    {& %f.FINAL_RANK ::= :finalRank }
    {& %f.TOURNAMENT_ID ::= :tournament.id }
    {& %f.ID in :ids_ }
  }
  {#ID order by %f.ID }
  {#PLAYER order by %f.PLAYER_ID }
  {#FINAL_RANK order by %f.FINAL_RANK }
  {#TOURNAMENT order by %f.TOURNAMENT_ID }
;

INSERT_GAME(CRUD,in=Game,out=Game,tab=game)=
  insert into %%game (%ID, %HOME_PARTICIPANT_ID, %AWAY_PARTICIPANT_ID, %STATUS, %RESULT)
  {= values (:id(seq=GAME), :homeParticipant.id, :awayParticipant.id, :status, :result(type=result)) }
;

GET_GAME(CRUD,in=Game,out=Game,tab=game=g,tab=participant=p1,tab=participant=p)=
  select %g.ID @id(id), %g.HOME_PARTICIPANT_ID @homeParticipant.id(id), %g.AWAY_PARTICIPANT_ID @awayParticipant.id(id), %g.STATUS @status, %g.RESULT @result(type=result)
         {? :awayParticipant(call=toInit) | , %p1.POINTS @awayParticipant.points, %p1.RANK @awayParticipant.rank, %p1.TOURNAMENT_ID @awayParticipant.tournamentId, %p1.GROUP_ID @awayParticipant.group.id, %p1.PLAYER_ID @awayParticipant.player.id, %p1.SCORE @awayParticipant.score(type=score), %p1.SECONDARY_RANK @awayParticipant.secondaryRank }
         {? :homeParticipant(call=toInit) | , %p.POINTS @homeParticipant.points, %p.RANK @homeParticipant.rank, %p.TOURNAMENT_ID @homeParticipant.tournamentId, %p.GROUP_ID @homeParticipant.group.id, %p.PLAYER_ID @homeParticipant.player.id, %p.SCORE @homeParticipant.score(type=score), %p.SECONDARY_RANK @homeParticipant.secondaryRank }
  from %%game g
  {? :awayParticipant(call=toInit) | left join %%participant p1 on %g.AWAY_PARTICIPANT_ID = %p1.ID }
  {? :homeParticipant(call=toInit) | left join %%participant p on %g.HOME_PARTICIPANT_ID = %p.ID }
  {= where
    {& %g.ID ::= :id }
    {& %g.HOME_PARTICIPANT_ID ::= :homeParticipant.id }
    {& %g.AWAY_PARTICIPANT_ID ::= :awayParticipant.id }
    {& %g.STATUS ::= :status }
    {& %g.RESULT ::= :result(type=result) }
  }
;

UPDATE_GAME(CRUD,in=Game,out=Game,tab=game)=
  update %%game
  {= set
    { ,%HOME_PARTICIPANT_ID = :homeParticipant.id(call=isDef) }
    { ,%AWAY_PARTICIPANT_ID = :awayParticipant.id(call=isDef) }
    { ,%STATUS = :status(call=isDef) }
    { ,%RESULT = :result(type=result,call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_GAME(CRUD,in=Game,out=Game,tab=game)=
  delete from %%game
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_GAME(QRY,in=Game,out=Game,tab=game=g,tab=participant=p1,tab=participant=p)=
  select {? :onlyIds_ | %g.ID @id(id) |
    %g.ID @id(id), %g.HOME_PARTICIPANT_ID @homeParticipant.id(id), %g.AWAY_PARTICIPANT_ID @awayParticipant.id(id), %g.STATUS @status, %g.RESULT @result(type=result)
    {? :awayParticipant(call=toInit) | , %p1.POINTS @awayParticipant.points, %p1.RANK @awayParticipant.rank, %p1.TOURNAMENT_ID @awayParticipant.tournamentId, %p1.GROUP_ID @awayParticipant.group.id, %p1.PLAYER_ID @awayParticipant.player.id, %p1.SCORE @awayParticipant.score(type=score), %p1.SECONDARY_RANK @awayParticipant.secondaryRank }
    {? :homeParticipant(call=toInit) | , %p.POINTS @homeParticipant.points, %p.RANK @homeParticipant.rank, %p.TOURNAMENT_ID @homeParticipant.tournamentId, %p.GROUP_ID @homeParticipant.group.id, %p.PLAYER_ID @homeParticipant.player.id, %p.SCORE @homeParticipant.score(type=score), %p.SECONDARY_RANK @homeParticipant.secondaryRank }
  }
  from %%game g
  {? :awayParticipant(call=toInit) | left join %%participant p1 on %g.AWAY_PARTICIPANT_ID = %p1.ID }
  {? :homeParticipant(call=toInit) | left join %%participant p on %g.HOME_PARTICIPANT_ID = %p.ID }
  {= where
    {& %g.ID ::= :id }
    {& %g.HOME_PARTICIPANT_ID ::= :homeParticipant.id }
    {& %g.AWAY_PARTICIPANT_ID ::= :awayParticipant.id }
    {& UPPER(%g.STATUS) like :+status }
    {& %g.RESULT ::= :result(type=result) }
    {& %g.ID in :ids_ }
  }
  {#ID order by %g.ID }
  {#HOME_PARTICIPANT order by %g.HOME_PARTICIPANT_ID }
  {#AWAY_PARTICIPANT order by %g.AWAY_PARTICIPANT_ID }
;

INSERT_GROUPS(CRUD,in=Groups,out=Groups,tab=groups)=
  insert into %%groups (%ID, %NAME, %STAGE_ID)
  {= values (:id(seq=GROUPS), :name, :stage.id) }
;

GET_GROUPS(CRUD,in=Groups,out=Groups,tab=groups=g,tab=participant=p,tab=stage=s)=
  select %g.ID @id(id), %g.NAME @name, %g.STAGE_ID @stage.id(id)
         {? :participants(call=toInit) | , %p.ID @participants.id(id), %p.POINTS @participants.points, %p.RANK @participants.rank, %p.TOURNAMENT_ID @participants.tournamentId, %p.GROUP_ID @participants.group.id, %p.PLAYER_ID @participants.player.id, %p.SCORE @participants.score(type=score), %p.SECONDARY_RANK @participants.secondaryRank }
         {? :stage(call=toInit) | , %s.NAME @stage.name, %s.SEQUENCE @stage.sequence, %s.NUMBER_OF_HOCKEY @stage.numberOfHockey, %s.WIN_POINTS @stage.winPoints, %s.TYPE @stage.type, %s.TOURNAMENT_ID @stage.tournament.id, %s.STATUS @stage.status, %s.COPY_RESULT_STAGE @stage.copyResultStage.id }
  from %%groups g
  {? :participants(call=toInit) | left join %%participant p on %g.ID = %p.GROUP_ID }
  {? :stage(call=toInit) | left join %%stage s on %g.STAGE_ID = %s.ID }
  {= where
    {& %g.ID ::= :id }
    {& %g.NAME ::= :name }
    {& %g.STAGE_ID ::= :stage.id }
  }
;

UPDATE_GROUPS(CRUD,in=Groups,out=Groups,tab=groups)=
  update %%groups
  {= set
    { ,%NAME = :name }
    { ,%STAGE_ID = :stage.id }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_GROUPS(CRUD,in=Groups,out=Groups,tab=groups)=
  delete from %%groups
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_GROUPS(QRY,in=Groups,out=Groups,tab=groups=g,tab=participant=p,tab=stage=s)=
  select {? :onlyIds_ | %g.ID @id(id) |
    %g.ID @id(id), %g.NAME @name, %g.STAGE_ID @stage.id(id)
    {? :participants(call=toInit) | , %p.ID @participants.id(id), %p.POINTS @participants.points, %p.RANK @participants.rank, %p.TOURNAMENT_ID @participants.tournamentId, %p.GROUP_ID @participants.group.id, %p.PLAYER_ID @participants.player.id, %p.SCORE @participants.score(type=score), %p.SECONDARY_RANK @participants.secondaryRank }
    {? :stage(call=toInit) | , %s.NAME @stage.name, %s.SEQUENCE @stage.sequence, %s.NUMBER_OF_HOCKEY @stage.numberOfHockey, %s.WIN_POINTS @stage.winPoints, %s.TYPE @stage.type, %s.TOURNAMENT_ID @stage.tournament.id, %s.STATUS @stage.status, %s.COPY_RESULT_STAGE @stage.copyResultStage.id }
  }
  from %%groups g
  {? :participants(call=toInit) | left join %%participant p on %g.ID = %p.GROUP_ID }
  {? :stage(call=toInit) | left join %%stage s on %g.STAGE_ID = %s.ID }
  {= where
    {& %g.ID ::= :id }
    {& UPPER(%g.NAME) like :+name }
    {& %g.STAGE_ID ::= :stage.id }
    {& %g.ID in :ids_ }
  }
  {#ID order by %g.ID }
  {#NAME order by %g.NAME }
  {#STAGE order by %g.STAGE_ID }
;

INSERT_ITHF_TOURNAMENT(CRUD,in=IthfTournament,out=IthfTournament,tab=ithfTournament)=
  insert into %%ithf_tournament (%ID, %PLAYER_ID, %NAME, %SERIES, %DATE, %POINTS, %RANK)
  {= values (:id(seq=ITHF_TOURNAMENT), :player.id, :name, :series(type=series), :date, :points, :rank) }
;

GET_ITHF_TOURNAMENT(CRUD,in=IthfTournament,out=IthfTournament,tab=ithfTournament=i,tab=player=p)=
  select %i.ID @id(id), %i.PLAYER_ID @player.id(id), %i.NAME @name, %i.SERIES @series(type=series), %i.DATE @date, %i.POINTS @points, %i.RANK @rank
         {? :player(call=toInit) | , %p.NAME @player.name, %p.SURNAME @player.surname(type=surname), %p.NICKNAME @player.nickname, %p.GENDER @player.gender, %p.DATE_OF_BIRTH @player.dateOfBirth, %p.COUNTRY @player.country, %p.CITY @player.city, %p.CLUB @player.club, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId, %p.NAME_ASCII @player.nameAscii, %p.SURNAME_ASCII @player.surnameAscii, %p.VERIFICATION @player.verification }
  from %%ithf_tournament i
  {? :player(call=toInit) | left join %%player p on %i.PLAYER_ID = %p.ID }
  {= where
    {& %i.ID ::= :id }
    {& %i.PLAYER_ID ::= :player.id }
    {& %i.NAME ::= :name }
    {& %i.SERIES ::= :series(type=series) }
    {& %i.DATE ::= :date }
    {& %i.POINTS ::= :points }
    {& %i.RANK ::= :rank }
  }
;

UPDATE_ITHF_TOURNAMENT(CRUD,in=IthfTournament,out=IthfTournament,tab=ithfTournament)=
  update %%ithf_tournament
  {= set
    { ,%PLAYER_ID = :player.id(call=isDef) }
    { ,%NAME = :name(call=isDef) }
    { ,%SERIES = :series(type=series,call=isDef) }
    { ,%DATE = :date(call=isDef) }
    { ,%POINTS = :points(call=isDef) }
    { ,%RANK = :rank(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_ITHF_TOURNAMENT(CRUD,in=IthfTournament,out=IthfTournament,tab=ithfTournament)=
  delete from %%ithf_tournament
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_ITHF_TOURNAMENT(QRY,in=IthfTournament,out=IthfTournament,tab=ithfTournament=i,tab=player=p)=
  select {? :onlyIds_ | %i.ID @id(id) |
    %i.ID @id(id), %i.PLAYER_ID @player.id(id), %i.NAME @name, %i.SERIES @series(type=series), %i.DATE @date, %i.POINTS @points, %i.RANK @rank
    {? :player(call=toInit) | , %p.NAME @player.name, %p.SURNAME @player.surname(type=surname), %p.NICKNAME @player.nickname, %p.GENDER @player.gender, %p.DATE_OF_BIRTH @player.dateOfBirth, %p.COUNTRY @player.country, %p.CITY @player.city, %p.CLUB @player.club, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId, %p.NAME_ASCII @player.nameAscii, %p.SURNAME_ASCII @player.surnameAscii, %p.VERIFICATION @player.verification }
  }
  from %%ithf_tournament i
  {? :player(call=toInit) | left join %%player p on %i.PLAYER_ID = %p.ID }
  {= where
    {& %i.ID ::= :id }
    {& %i.PLAYER_ID ::= :player.id }
    {& UPPER(%i.NAME) like :+name }
    {& %i.SERIES ::= :series(type=series) }
    {& %i.DATE ::= :date }
    {& %i.POINTS ::= :points }
    {& %i.RANK ::= :rank }
    {& %i.ID in :ids_ }
  }
  {#ID order by %i.ID }
  {#PLAYER order by %i.PLAYER_ID }
;

INSERT_PARTICIPANT(CRUD,in=Participant,out=Participant,tab=participant)=
  insert into %%participant (%ID, %POINTS, %RANK, %TOURNAMENT_ID, %GROUP_ID, %PLAYER_ID, %SCORE, %SECONDARY_RANK)
  {= values (:id(seq=PARTICIPANT), :points, :rank, :tournamentId, :group.id, :player.id, :score(type=score), :secondaryRank) }
;

GET_PARTICIPANT(CRUD,in=Participant,out=Participant,tab=participant=p,tab=game=g1,tab=groups=g,tab=player=p1,tab=playOffGame=p2)=
  select %p.ID @id(id), %p.POINTS @points, %p.RANK @rank, %p.TOURNAMENT_ID @tournamentId, %p.GROUP_ID @group.id(id), %p.PLAYER_ID @player.id(id), %p.SCORE @score(type=score), %p.SECONDARY_RANK @secondaryRank
         {? :games(call=toInit) | , %g1.ID @games.id(id), %g1.HOME_PARTICIPANT_ID @games.homeParticipant.id, %g1.AWAY_PARTICIPANT_ID @games.awayParticipant.id, %g1.STATUS @games.status, %g1.RESULT @games.result(type=result) }
         {? :group(call=toInit) | , %g.NAME @group.name, %g.STAGE_ID @group.stage.id }
         {? :player(call=toInit) | , %p1.NAME @player.name, %p1.SURNAME @player.surname(type=surname), %p1.NICKNAME @player.nickname, %p1.GENDER @player.gender, %p1.DATE_OF_BIRTH @player.dateOfBirth, %p1.COUNTRY @player.country, %p1.CITY @player.city, %p1.CLUB @player.club, %p1.WORLD_RANKING @player.worldRanking, %p1.ITHF_ID @player.ithfId, %p1.NAME_ASCII @player.nameAscii, %p1.SURNAME_ASCII @player.surnameAscii, %p1.VERIFICATION @player.verification }
         {? :playOffGames(call=toInit) | , %p2.ID @playOffGames.id(id), %p2.HOME_PARTICIPANT_ID @playOffGames.homeParticipant.id, %p2.AWAY_PARTICIPANT_ID @playOffGames.awayParticipant.id, %p2.STATUS @playOffGames.status, %p2.RESULT @playOffGames.result(type=result), %p2.STAGE_ID @playOffGames.stage.id, %p2.POSITION @playOffGames.position }
  from %%participant p
  {? :games(call=toInit) | left join %%game g1 on %p.ID = %g1.HOME_PARTICIPANT_ID }
  {? :group(call=toInit) | left join %%groups g on %p.GROUP_ID = %g.ID }
  {? :player(call=toInit) | left join %%player p1 on %p.PLAYER_ID = %p1.ID }
  {? :playOffGames(call=toInit) | left join %%play_off_game p2 on %p.ID = %p2.HOME_PARTICIPANT_ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.POINTS ::= :points }
    {& %p.RANK ::= :rank }
    {& %p.TOURNAMENT_ID ::= :tournamentId }
    {& %p.GROUP_ID ::= :group.id }
    {& %p.PLAYER_ID ::= :player.id }
    {& %p.SCORE ::= :score(type=score) }
    {& %p.SECONDARY_RANK ::= :secondaryRank }
  }
;

UPDATE_PARTICIPANT(CRUD,in=Participant,out=Participant,tab=participant)=
  update %%participant
  {= set
    { ,%POINTS = :points(call=isDef) }
    { ,%RANK = :rank(call=isDef) }
    { ,%TOURNAMENT_ID = :tournamentId(call=isDef) }
    { ,%GROUP_ID = :group.id(call=isDef) }
    { ,%PLAYER_ID = :player.id(call=isDef) }
    { ,%SCORE = :score(type=score,call=isDef) }
    { ,%SECONDARY_RANK = :secondaryRank(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_PARTICIPANT(CRUD,in=Participant,out=Participant,tab=participant)=
  delete from %%participant
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PARTICIPANT(QRY,in=Participant,out=Participant,tab=participant=p,tab=game=g1,tab=groups=g,tab=player=p1,tab=playOffGame=p2)=
  select {? :onlyIds_ | %p.ID @id(id) |
    %p.ID @id(id), %p.POINTS @points, %p.RANK @rank, %p.TOURNAMENT_ID @tournamentId, %p.GROUP_ID @group.id(id), %p.PLAYER_ID @player.id(id), %p.SCORE @score(type=score), %p.SECONDARY_RANK @secondaryRank
    {? :games(call=toInit) | , %g1.ID @games.id(id), %g1.HOME_PARTICIPANT_ID @games.homeParticipant.id, %g1.AWAY_PARTICIPANT_ID @games.awayParticipant.id, %g1.STATUS @games.status, %g1.RESULT @games.result(type=result) }
    {? :group(call=toInit) | , %g.NAME @group.name, %g.STAGE_ID @group.stage.id }
    {? :player(call=toInit) | , %p1.NAME @player.name, %p1.SURNAME @player.surname(type=surname), %p1.NICKNAME @player.nickname, %p1.GENDER @player.gender, %p1.DATE_OF_BIRTH @player.dateOfBirth, %p1.COUNTRY @player.country, %p1.CITY @player.city, %p1.CLUB @player.club, %p1.WORLD_RANKING @player.worldRanking, %p1.ITHF_ID @player.ithfId, %p1.NAME_ASCII @player.nameAscii, %p1.SURNAME_ASCII @player.surnameAscii, %p1.VERIFICATION @player.verification }
    {? :playOffGames(call=toInit) | , %p2.ID @playOffGames.id(id), %p2.HOME_PARTICIPANT_ID @playOffGames.homeParticipant.id, %p2.AWAY_PARTICIPANT_ID @playOffGames.awayParticipant.id, %p2.STATUS @playOffGames.status, %p2.RESULT @playOffGames.result(type=result), %p2.STAGE_ID @playOffGames.stage.id, %p2.POSITION @playOffGames.position }
  }
  from %%participant p
  {? :games(call=toInit) | left join %%game g1 on %p.ID = %g1.HOME_PARTICIPANT_ID }
  {? :group(call=toInit) | left join %%groups g on %p.GROUP_ID = %g.ID }
  {? :player(call=toInit) | left join %%player p1 on %p.PLAYER_ID = %p1.ID }
  {? :playOffGames(call=toInit) | left join %%play_off_game p2 on %p.ID = %p2.HOME_PARTICIPANT_ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.POINTS ::= :points }
    {& %p.RANK ::= :rank }
    {& %p.TOURNAMENT_ID ::= :tournamentId }
    {& %p.GROUP_ID ::= :group.id }
    {& %p.PLAYER_ID ::= :player.id }
    {& %p.SCORE ::= :score(type=score) }
    {& %p.SECONDARY_RANK ::= :secondaryRank }
    {& %p.ID in :ids_ }
  }
  {#ID order by %p.ID }
  {#RANK order by %p.RANK }
  {#TOURNAMENT_ID order by %p.TOURNAMENT_ID }
  {#GROUP order by %p.GROUP_ID }
  {#PLAYER order by %p.PLAYER_ID }
;

INSERT_PLAY_OFF_GAME(CRUD,in=PlayOffGame,out=PlayOffGame,tab=playOffGame)=
  insert into %%play_off_game (%ID, %HOME_PARTICIPANT_ID, %AWAY_PARTICIPANT_ID, %STATUS, %RESULT, %STAGE_ID, %POSITION)
  {= values (:id(seq=PLAY_OFF_GAME), :homeParticipant.id, :awayParticipant.id, :status, :result(type=result), :stage.id, :position) }
;

GET_PLAY_OFF_GAME(CRUD,in=PlayOffGame,out=PlayOffGame,tab=playOffGame=p,tab=participant=p2,tab=participant=p1,tab=stage=s)=
  select %p.ID @id(id), %p.HOME_PARTICIPANT_ID @homeParticipant.id(id), %p.AWAY_PARTICIPANT_ID @awayParticipant.id(id), %p.STATUS @status, %p.RESULT @result(type=result), %p.STAGE_ID @stage.id(id), %p.POSITION @position
         {? :awayParticipant(call=toInit) | , %p2.POINTS @awayParticipant.points, %p2.RANK @awayParticipant.rank, %p2.TOURNAMENT_ID @awayParticipant.tournamentId, %p2.GROUP_ID @awayParticipant.group.id, %p2.PLAYER_ID @awayParticipant.player.id, %p2.SCORE @awayParticipant.score(type=score), %p2.SECONDARY_RANK @awayParticipant.secondaryRank }
         {? :homeParticipant(call=toInit) | , %p1.POINTS @homeParticipant.points, %p1.RANK @homeParticipant.rank, %p1.TOURNAMENT_ID @homeParticipant.tournamentId, %p1.GROUP_ID @homeParticipant.group.id, %p1.PLAYER_ID @homeParticipant.player.id, %p1.SCORE @homeParticipant.score(type=score), %p1.SECONDARY_RANK @homeParticipant.secondaryRank }
         {? :stage(call=toInit) | , %s.NAME @stage.name, %s.SEQUENCE @stage.sequence, %s.NUMBER_OF_HOCKEY @stage.numberOfHockey, %s.WIN_POINTS @stage.winPoints, %s.TYPE @stage.type, %s.TOURNAMENT_ID @stage.tournament.id, %s.STATUS @stage.status, %s.COPY_RESULT_STAGE @stage.copyResultStage.id }
  from %%play_off_game p
  {? :awayParticipant(call=toInit) | left join %%participant p2 on %p.AWAY_PARTICIPANT_ID = %p2.ID }
  {? :homeParticipant(call=toInit) | left join %%participant p1 on %p.HOME_PARTICIPANT_ID = %p1.ID }
  {? :stage(call=toInit) | left join %%stage s on %p.STAGE_ID = %s.ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.HOME_PARTICIPANT_ID ::= :homeParticipant.id }
    {& %p.AWAY_PARTICIPANT_ID ::= :awayParticipant.id }
    {& %p.STATUS ::= :status }
    {& %p.RESULT ::= :result(type=result) }
    {& %p.STAGE_ID ::= :stage.id }
    {& %p.POSITION ::= :position }
  }
;

UPDATE_PLAY_OFF_GAME(CRUD,in=PlayOffGame,out=PlayOffGame,tab=playOffGame)=
  update %%play_off_game
  {= set
    { ,%HOME_PARTICIPANT_ID = :homeParticipant.id(call=isDef) }
    { ,%AWAY_PARTICIPANT_ID = :awayParticipant.id(call=isDef) }
    { ,%STATUS = :status(call=isDef) }
    { ,%RESULT = :result(type=result,call=isDef) }
    { ,%STAGE_ID = :stage.id(call=isDef) }
    { ,%POSITION = :position(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_PLAY_OFF_GAME(CRUD,in=PlayOffGame,out=PlayOffGame,tab=playOffGame)=
  delete from %%play_off_game
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PLAY_OFF_GAME(QRY,in=PlayOffGame,out=PlayOffGame,tab=playOffGame=p,tab=participant=p2,tab=participant=p1,tab=stage=s)=
  select {? :onlyIds_ | %p.ID @id(id) |
    %p.ID @id(id), %p.HOME_PARTICIPANT_ID @homeParticipant.id(id), %p.AWAY_PARTICIPANT_ID @awayParticipant.id(id), %p.STATUS @status, %p.RESULT @result(type=result), %p.STAGE_ID @stage.id(id), %p.POSITION @position
    {? :awayParticipant(call=toInit) | , %p2.POINTS @awayParticipant.points, %p2.RANK @awayParticipant.rank, %p2.TOURNAMENT_ID @awayParticipant.tournamentId, %p2.GROUP_ID @awayParticipant.group.id, %p2.PLAYER_ID @awayParticipant.player.id, %p2.SCORE @awayParticipant.score(type=score), %p2.SECONDARY_RANK @awayParticipant.secondaryRank }
    {? :homeParticipant(call=toInit) | , %p1.POINTS @homeParticipant.points, %p1.RANK @homeParticipant.rank, %p1.TOURNAMENT_ID @homeParticipant.tournamentId, %p1.GROUP_ID @homeParticipant.group.id, %p1.PLAYER_ID @homeParticipant.player.id, %p1.SCORE @homeParticipant.score(type=score), %p1.SECONDARY_RANK @homeParticipant.secondaryRank }
    {? :stage(call=toInit) | , %s.NAME @stage.name, %s.SEQUENCE @stage.sequence, %s.NUMBER_OF_HOCKEY @stage.numberOfHockey, %s.WIN_POINTS @stage.winPoints, %s.TYPE @stage.type, %s.TOURNAMENT_ID @stage.tournament.id, %s.STATUS @stage.status, %s.COPY_RESULT_STAGE @stage.copyResultStage.id }
  }
  from %%play_off_game p
  {? :awayParticipant(call=toInit) | left join %%participant p2 on %p.AWAY_PARTICIPANT_ID = %p2.ID }
  {? :homeParticipant(call=toInit) | left join %%participant p1 on %p.HOME_PARTICIPANT_ID = %p1.ID }
  {? :stage(call=toInit) | left join %%stage s on %p.STAGE_ID = %s.ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.HOME_PARTICIPANT_ID ::= :homeParticipant.id }
    {& %p.AWAY_PARTICIPANT_ID ::= :awayParticipant.id }
    {& UPPER(%p.STATUS) like :+status }
    {& %p.RESULT ::= :result(type=result) }
    {& %p.STAGE_ID ::= :stage.id }
    {& %p.POSITION ::= :position }
    {& %p.ID in :ids_ }
  }
  {#ID order by %p.ID }
  {#HOME_PARTICIPANT order by %p.HOME_PARTICIPANT_ID }
  {#AWAY_PARTICIPANT order by %p.AWAY_PARTICIPANT_ID }
  {#STAGE order by %p.STAGE_ID }
  {#POSITION order by %p.POSITION }
;

INSERT_PLAYER(CRUD,in=Player,out=Player,tab=player)=
  insert into %%player (%ID, %NAME, %SURNAME, %NICKNAME, %GENDER, %DATE_OF_BIRTH, %COUNTRY, %CITY, %CLUB, %WORLD_RANKING, %ITHF_ID, %NAME_ASCII, %SURNAME_ASCII, %VERIFICATION)
  {= values (:id(seq=PLAYER), :name, :surname(type=surname), :nickname, :gender, :dateOfBirth, :country, :city, :club, :worldRanking, :ithfId, :nameAscii, :surnameAscii, :verification) }
;

GET_PLAYER(CRUD,in=Player,out=Player,tab=player=p,tab=finalStanding=f,tab=ithfTournament=i,tab=participant=p1,tab=user=u)=
  select %p.ID @id(id), %p.NAME @name, %p.SURNAME @surname(type=surname), %p.NICKNAME @nickname, %p.GENDER @gender, %p.DATE_OF_BIRTH @dateOfBirth, %p.COUNTRY @country, %p.CITY @city, %p.CLUB @club, %p.WORLD_RANKING @worldRanking, %p.ITHF_ID @ithfId, %p.NAME_ASCII @nameAscii, %p.SURNAME_ASCII @surnameAscii, %p.VERIFICATION @verification
         {? :finalStandings(call=toInit) | , %f.ID @finalStandings.id(id), %f.PLAYER_ID @finalStandings.player.id, %f.FINAL_RANK @finalStandings.finalRank, %f.TOURNAMENT_ID @finalStandings.tournament.id }
         {? :ithfTournaments(call=toInit) | , %i.ID @ithfTournaments.id(id), %i.PLAYER_ID @ithfTournaments.player.id, %i.NAME @ithfTournaments.name, %i.SERIES @ithfTournaments.series(type=series), %i.DATE @ithfTournaments.date, %i.POINTS @ithfTournaments.points, %i.RANK @ithfTournaments.rank }
         {? :participants(call=toInit) | , %p1.ID @participants.id(id), %p1.POINTS @participants.points, %p1.RANK @participants.rank, %p1.TOURNAMENT_ID @participants.tournamentId, %p1.GROUP_ID @participants.group.id, %p1.PLAYER_ID @participants.player.id, %p1.SCORE @participants.score(type=score), %p1.SECONDARY_RANK @participants.secondaryRank }
         {? :users(call=toInit) | , %u.PLAYER_ID @users.player.id(id), %u.EMAIL @users.email, %u.LOGIN @users.login, %u.PASSWORD @users.password, %u.PHONE @users.phone, %u.ROLE @users.role, %u.VALIDITY @users.validity }
  from %%player p
  {? :finalStandings(call=toInit) | left join %%final_standing f on %p.ID = %f.PLAYER_ID }
  {? :ithfTournaments(call=toInit) | left join %%ithf_tournament i on %p.ID = %i.PLAYER_ID }
  {? :participants(call=toInit) | left join %%participant p1 on %p.ID = %p1.PLAYER_ID }
  {? :users(call=toInit) | left join %%user u on %p.ID = %u.PLAYER_ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.NAME ::= :name }
    {& %p.SURNAME ::= :surname(type=surname) }
    {& %p.NICKNAME ::= :nickname }
    {& %p.GENDER ::= :gender }
    {& %p.DATE_OF_BIRTH ::= :dateOfBirth }
    {& %p.COUNTRY ::= :country }
    {& %p.CITY ::= :city }
    {& %p.CLUB ::= :club }
    {& %p.WORLD_RANKING ::= :worldRanking }
    {& %p.ITHF_ID ::= :ithfId }
    {& %p.NAME_ASCII ::= :nameAscii }
    {& %p.SURNAME_ASCII ::= :surnameAscii }
    {& %p.VERIFICATION ::= :verification }
  }
;

UPDATE_PLAYER(CRUD,in=Player,out=Player,tab=player)=
  update %%player
  {= set
    { ,%NAME = :name(call=isDef) }
    { ,%SURNAME = :surname(type=surname,call=isDef) }
    { ,%NICKNAME = :nickname(call=isDef) }
    { ,%GENDER = :gender(call=isDef) }
    { ,%DATE_OF_BIRTH = :dateOfBirth(call=isDef) }
    { ,%COUNTRY = :country(call=isDef) }
    { ,%CITY = :city(call=isDef) }
    { ,%CLUB = :club(call=isDef) }
    { ,%WORLD_RANKING = :worldRanking(call=isDef) }
    { ,%ITHF_ID = :ithfId(call=isDef) }
    { ,%NAME_ASCII = :nameAscii(call=isDef) }
    { ,%SURNAME_ASCII = :surnameAscii(call=isDef) }
    { ,%VERIFICATION = :verification(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_PLAYER(CRUD,in=Player,out=Player,tab=player)=
  delete from %%player
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PLAYER(QRY,in=Player,out=Player,tab=player=p,tab=finalStanding=f,tab=ithfTournament=i,tab=participant=p1,tab=user=u)=
  select {? :onlyIds_ | %p.ID @id(id) |
    %p.ID @id(id), %p.NAME @name, %p.SURNAME @surname(type=surname), %p.NICKNAME @nickname, %p.GENDER @gender, %p.DATE_OF_BIRTH @dateOfBirth, %p.COUNTRY @country, %p.CITY @city, %p.CLUB @club, %p.WORLD_RANKING @worldRanking, %p.ITHF_ID @ithfId, %p.NAME_ASCII @nameAscii, %p.SURNAME_ASCII @surnameAscii, %p.VERIFICATION @verification
    {? :finalStandings(call=toInit) | , %f.ID @finalStandings.id(id), %f.PLAYER_ID @finalStandings.player.id, %f.FINAL_RANK @finalStandings.finalRank, %f.TOURNAMENT_ID @finalStandings.tournament.id }
    {? :ithfTournaments(call=toInit) | , %i.ID @ithfTournaments.id(id), %i.PLAYER_ID @ithfTournaments.player.id, %i.NAME @ithfTournaments.name, %i.SERIES @ithfTournaments.series(type=series), %i.DATE @ithfTournaments.date, %i.POINTS @ithfTournaments.points, %i.RANK @ithfTournaments.rank }
    {? :participants(call=toInit) | , %p1.ID @participants.id(id), %p1.POINTS @participants.points, %p1.RANK @participants.rank, %p1.TOURNAMENT_ID @participants.tournamentId, %p1.GROUP_ID @participants.group.id, %p1.PLAYER_ID @participants.player.id, %p1.SCORE @participants.score(type=score), %p1.SECONDARY_RANK @participants.secondaryRank }
    {? :users(call=toInit) | , %u.PLAYER_ID @users.player.id(id), %u.EMAIL @users.email, %u.LOGIN @users.login, %u.PASSWORD @users.password, %u.PHONE @users.phone, %u.ROLE @users.role, %u.VALIDITY @users.validity }
  }
  from %%player p
  {? :finalStandings(call=toInit) | left join %%final_standing f on %p.ID = %f.PLAYER_ID }
  {? :ithfTournaments(call=toInit) | left join %%ithf_tournament i on %p.ID = %i.PLAYER_ID }
  {? :participants(call=toInit) | left join %%participant p1 on %p.ID = %p1.PLAYER_ID }
  {? :users(call=toInit) | left join %%user u on %p.ID = %u.PLAYER_ID }
  {= where
    {& %p.ID ::= :id }
    {& UPPER(%p.NAME) like :+name }
    {& %p.SURNAME ::= :surname(type=surname) }
    {& UPPER(%p.NICKNAME) like :+nickname }
    {& UPPER(%p.GENDER) like :+gender }
    {& %p.DATE_OF_BIRTH ::= :dateOfBirth }
    {& UPPER(%p.COUNTRY) like :+country }
    {& UPPER(%p.CITY) like :+city }
    {& UPPER(%p.CLUB) like :+club }
    {& %p.WORLD_RANKING ::= :worldRanking }
    {& %p.ITHF_ID ::= :ithfId }
    {& UPPER(%p.NAME_ASCII) like :+nameAscii }
    {& UPPER(%p.SURNAME_ASCII) like :+surnameAscii }
    {& %p.VERIFICATION ::= :verification }
    {& %p.ID in :ids_ }
  }
  {#ID order by %p.ID }
;

INSERT_PLAYING_FORMAT(CRUD,in=PlayingFormat,out=PlayingFormat,tab=playingFormat)=
  insert into %%playing_format (%ID, %NAME, %FINAL_PROMOTING, %LOWER_PROMOTING, %WIN_POINTS, %PLAY_OFF_FINAL, %PLAY_OFF_LOWER, %MIN_PLAYERS_IN_GROUP, %SORT_TYPE, %DESCRIPTION)
  {= values (:id(seq=PLAYING_FORMAT), :name, :finalPromoting, :lowerPromoting, :winPoints, :playOffFinal, :playOffLower, :minPlayersInGroup, :sortType, :description) }
;

GET_PLAYING_FORMAT(CRUD,in=PlayingFormat,out=PlayingFormat,tab=playingFormat=p,tab=tournament=t)=
  select %p.ID @id(id), %p.NAME @name, %p.FINAL_PROMOTING @finalPromoting, %p.LOWER_PROMOTING @lowerPromoting, %p.WIN_POINTS @winPoints, %p.PLAY_OFF_FINAL @playOffFinal, %p.PLAY_OFF_LOWER @playOffLower, %p.MIN_PLAYERS_IN_GROUP @minPlayersInGroup, %p.SORT_TYPE @sortType, %p.DESCRIPTION @description
         {? :tournaments(call=toInit) | , %t.ID @tournaments.id(id), %t.NAME @tournaments.name, %t.STATUS @tournaments.status, %t.PLAYING_FORMAT_ID @tournaments.playingFormat.id, %t.COUNTRY @tournaments.country, %t.CITY @tournaments.city, %t.ADDRESS @tournaments.address, %t.LOGO @tournaments.logo, %t.REGISTRATION_FROM @tournaments.registrationFrom, %t.DATE @tournaments.date, %t.REGISTRATION_TO @tournaments.registrationTo, %t.VISIBLE @tournaments.visible }
  from %%playing_format p
  {? :tournaments(call=toInit) | left join %%tournament t on %p.ID = %t.PLAYING_FORMAT_ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.NAME ::= :name }
    {& %p.FINAL_PROMOTING ::= :finalPromoting }
    {& %p.LOWER_PROMOTING ::= :lowerPromoting }
    {& %p.WIN_POINTS ::= :winPoints }
    {& %p.PLAY_OFF_FINAL ::= :playOffFinal }
    {& %p.PLAY_OFF_LOWER ::= :playOffLower }
    {& %p.MIN_PLAYERS_IN_GROUP ::= :minPlayersInGroup }
    {& %p.SORT_TYPE ::= :sortType }
    {& %p.DESCRIPTION ::= :description }
  }
;

UPDATE_PLAYING_FORMAT(CRUD,in=PlayingFormat,out=PlayingFormat,tab=playingFormat)=
  update %%playing_format
  {= set
    { ,%NAME = :name }
    { ,%FINAL_PROMOTING = :finalPromoting }
    { ,%LOWER_PROMOTING = :lowerPromoting }
    { ,%WIN_POINTS = :winPoints }
    { ,%PLAY_OFF_FINAL = :playOffFinal }
    { ,%PLAY_OFF_LOWER = :playOffLower }
    { ,%MIN_PLAYERS_IN_GROUP = :minPlayersInGroup }
    { ,%SORT_TYPE = :sortType }
    { ,%DESCRIPTION = :description }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_PLAYING_FORMAT(CRUD,in=PlayingFormat,out=PlayingFormat,tab=playingFormat)=
  delete from %%playing_format
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PLAYING_FORMAT(QRY,in=PlayingFormat,out=PlayingFormat,tab=playingFormat=p,tab=tournament=t)=
  select {? :onlyIds_ | %p.ID @id(id) |
    %p.ID @id(id), %p.NAME @name, %p.FINAL_PROMOTING @finalPromoting, %p.LOWER_PROMOTING @lowerPromoting, %p.WIN_POINTS @winPoints, %p.PLAY_OFF_FINAL @playOffFinal, %p.PLAY_OFF_LOWER @playOffLower, %p.MIN_PLAYERS_IN_GROUP @minPlayersInGroup, %p.SORT_TYPE @sortType, %p.DESCRIPTION @description
    {? :tournaments(call=toInit) | , %t.ID @tournaments.id(id), %t.NAME @tournaments.name, %t.STATUS @tournaments.status, %t.PLAYING_FORMAT_ID @tournaments.playingFormat.id, %t.COUNTRY @tournaments.country, %t.CITY @tournaments.city, %t.ADDRESS @tournaments.address, %t.LOGO @tournaments.logo, %t.REGISTRATION_FROM @tournaments.registrationFrom, %t.DATE @tournaments.date, %t.REGISTRATION_TO @tournaments.registrationTo, %t.VISIBLE @tournaments.visible }
  }
  from %%playing_format p
  {? :tournaments(call=toInit) | left join %%tournament t on %p.ID = %t.PLAYING_FORMAT_ID }
  {= where
    {& %p.ID ::= :id }
    {& UPPER(%p.NAME) like :+name }
    {& %p.FINAL_PROMOTING ::= :finalPromoting }
    {& %p.LOWER_PROMOTING ::= :lowerPromoting }
    {& %p.WIN_POINTS ::= :winPoints }
    {& %p.PLAY_OFF_FINAL ::= :playOffFinal }
    {& %p.PLAY_OFF_LOWER ::= :playOffLower }
    {& %p.MIN_PLAYERS_IN_GROUP ::= :minPlayersInGroup }
    {& UPPER(%p.SORT_TYPE) like :+sortType }
    {& UPPER(%p.DESCRIPTION) like :+description }
    {& %p.ID in :ids_ }
  }
  {#ID order by %p.ID }
;

INSERT_RATING(CRUD,in=Rating,out=Rating,tab=rating)=
  insert into %%rating (%ID, %NAME, %RATING_POINTS_ID)
  {= values (:id(seq=RATING), :name, :ratingPoints.id) }
;

GET_RATING(CRUD,in=Rating,out=Rating,tab=rating=r,tab=ratingPoints=r1,tab=tournamentRating=t)=
  select %r.ID @id(id), %r.NAME @name, %r.RATING_POINTS_ID @ratingPoints.id(id)
         {? :ratingPoints(call=toInit) | , %r1.NAME @ratingPoints.name, %r1.POINTS @ratingPoints.points, %r1.RANK @ratingPoints.rank }
         {? :tournamentRatings(call=toInit) | , %t.ID @tournamentRatings.id(id), %t.TOURNAMENT_ID @tournamentRatings.tournament.id, %t.RATING_ID @tournamentRatings.rating.id }
  from %%rating r
  {? :ratingPoints(call=toInit) | left join %%rating_points r1 on %r.RATING_POINTS_ID = %r1.ID }
  {? :tournamentRatings(call=toInit) | left join %%tournament_rating t on %r.ID = %t.RATING_ID }
  {= where
    {& %r.ID ::= :id }
    {& %r.NAME ::= :name }
    {& %r.RATING_POINTS_ID ::= :ratingPoints.id }
  }
;

UPDATE_RATING(CRUD,in=Rating,out=Rating,tab=rating)=
  update %%rating
  {= set
    { ,%NAME = :name(call=isDef) }
    { ,%RATING_POINTS_ID = :ratingPoints.id(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_RATING(CRUD,in=Rating,out=Rating,tab=rating)=
  delete from %%rating
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_RATING(QRY,in=Rating,out=Rating,tab=rating=r,tab=ratingPoints=r1,tab=tournamentRating=t)=
  select {? :onlyIds_ | %r.ID @id(id) |
    %r.ID @id(id), %r.NAME @name, %r.RATING_POINTS_ID @ratingPoints.id(id)
    {? :ratingPoints(call=toInit) | , %r1.NAME @ratingPoints.name, %r1.POINTS @ratingPoints.points, %r1.RANK @ratingPoints.rank }
    {? :tournamentRatings(call=toInit) | , %t.ID @tournamentRatings.id(id), %t.TOURNAMENT_ID @tournamentRatings.tournament.id, %t.RATING_ID @tournamentRatings.rating.id }
  }
  from %%rating r
  {? :ratingPoints(call=toInit) | left join %%rating_points r1 on %r.RATING_POINTS_ID = %r1.ID }
  {? :tournamentRatings(call=toInit) | left join %%tournament_rating t on %r.ID = %t.RATING_ID }
  {= where
    {& %r.ID ::= :id }
    {& UPPER(%r.NAME) like :+name }
    {& %r.RATING_POINTS_ID ::= :ratingPoints.id }
    {& %r.ID in :ids_ }
  }
  {#ID order by %r.ID }
  {#RATING_POINTS order by %r.RATING_POINTS_ID }
;

INSERT_RATING_POINTS(CRUD,in=RatingPoints,out=RatingPoints,tab=ratingPoints)=
  insert into %%rating_points (%ID, %NAME, %POINTS, %RANK)
  {= values (:id(seq=RATING_POINTS), :name, :points, :rank) }
;

GET_RATING_POINTS(CRUD,in=RatingPoints,out=RatingPoints,tab=ratingPoints=r,tab=rating=r1)=
  select %r.ID @id(id), %r.NAME @name, %r.POINTS @points, %r.RANK @rank
         {? :ratings(call=toInit) | , %r1.ID @ratings.id(id), %r1.NAME @ratings.name, %r1.RATING_POINTS_ID @ratings.ratingPoints.id }
  from %%rating_points r
  {? :ratings(call=toInit) | left join %%rating r1 on %r.ID = %r1.RATING_POINTS_ID }
  {= where
    {& %r.ID ::= :id }
    {& %r.NAME ::= :name }
    {& %r.POINTS ::= :points }
    {& %r.RANK ::= :rank }
  }
;

UPDATE_RATING_POINTS(CRUD,in=RatingPoints,out=RatingPoints,tab=ratingPoints)=
  update %%rating_points
  {= set
    { ,%NAME = :name }
    { ,%POINTS = :points }
    { ,%RANK = :rank }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_RATING_POINTS(CRUD,in=RatingPoints,out=RatingPoints,tab=ratingPoints)=
  delete from %%rating_points
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_RATING_POINTS(QRY,in=RatingPoints,out=RatingPoints,tab=ratingPoints=r,tab=rating=r1)=
  select {? :onlyIds_ | %r.ID @id(id) |
    %r.ID @id(id), %r.NAME @name, %r.POINTS @points, %r.RANK @rank
    {? :ratings(call=toInit) | , %r1.ID @ratings.id(id), %r1.NAME @ratings.name, %r1.RATING_POINTS_ID @ratings.ratingPoints.id }
  }
  from %%rating_points r
  {? :ratings(call=toInit) | left join %%rating r1 on %r.ID = %r1.RATING_POINTS_ID }
  {= where
    {& %r.ID ::= :id }
    {& UPPER(%r.NAME) like :+name }
    {& %r.POINTS ::= :points }
    {& %r.RANK ::= :rank }
    {& %r.ID in :ids_ }
  }
  {#ID order by %r.ID }
;

INSERT_STAGE(CRUD,in=Stage,out=Stage,tab=stage)=
  insert into %%stage (%ID, %NAME, %SEQUENCE, %NUMBER_OF_HOCKEY, %WIN_POINTS, %TYPE, %TOURNAMENT_ID, %STATUS, %COPY_RESULT_STAGE)
  {= values (:id(seq=STAGE), :name, :sequence, :numberOfHockey, :winPoints, :type, :tournament.id, :status, :copyResultStage.id) }
;

GET_STAGE(CRUD,in=Stage,out=Stage,tab=stage=s,tab=stage=s1,tab=groups=g,tab=playOffGame=p,tab=stage=s2,tab=tournament=t)=
  select %s.ID @id(id), %s.NAME @name, %s.SEQUENCE @sequence, %s.NUMBER_OF_HOCKEY @numberOfHockey, %s.WIN_POINTS @winPoints, %s.TYPE @type, %s.TOURNAMENT_ID @tournament.id(id), %s.STATUS @status, %s.COPY_RESULT_STAGE @copyResultStage.id(id)
         {? :copyResultStage(call=toInit) | , %s1.NAME @copyResultStage.name, %s1.SEQUENCE @copyResultStage.sequence, %s1.NUMBER_OF_HOCKEY @copyResultStage.numberOfHockey, %s1.WIN_POINTS @copyResultStage.winPoints, %s1.TYPE @copyResultStage.type, %s1.TOURNAMENT_ID @copyResultStage.tournament.id(id), %s1.STATUS @copyResultStage.status, %s1.COPY_RESULT_STAGE @copyResultStage.copyResultStage.id(id) }
         {? :groups(call=toInit) | , %g.ID @groups.id(id), %g.NAME @groups.name, %g.STAGE_ID @groups.stage.id }
         {? :playOffGames(call=toInit) | , %p.ID @playOffGames.id(id), %p.HOME_PARTICIPANT_ID @playOffGames.homeParticipant.id, %p.AWAY_PARTICIPANT_ID @playOffGames.awayParticipant.id, %p.STATUS @playOffGames.status, %p.RESULT @playOffGames.result(type=result), %p.STAGE_ID @playOffGames.stage.id, %p.POSITION @playOffGames.position }
         {? :stages(call=toInit) | , %s2.ID @stages.id(id), %s2.NAME @stages.name, %s2.SEQUENCE @stages.sequence, %s2.NUMBER_OF_HOCKEY @stages.numberOfHockey, %s2.WIN_POINTS @stages.winPoints, %s2.TYPE @stages.type, %s2.TOURNAMENT_ID @stages.tournament.id(id), %s2.STATUS @stages.status, %s2.COPY_RESULT_STAGE @stages.copyResultStage.id(id) }
         {? :tournament(call=toInit) | , %t.NAME @tournament.name, %t.STATUS @tournament.status, %t.PLAYING_FORMAT_ID @tournament.playingFormat.id, %t.COUNTRY @tournament.country, %t.CITY @tournament.city, %t.ADDRESS @tournament.address, %t.LOGO @tournament.logo, %t.REGISTRATION_FROM @tournament.registrationFrom, %t.DATE @tournament.date, %t.REGISTRATION_TO @tournament.registrationTo, %t.VISIBLE @tournament.visible }
  from %%stage s
  {? :copyResultStage(call=toInit) | left join %%stage s1 on %s.COPY_RESULT_STAGE = %s1.ID }
  {? :groups(call=toInit) | left join %%groups g on %s.ID = %g.STAGE_ID }
  {? :playOffGames(call=toInit) | left join %%play_off_game p on %s.ID = %p.STAGE_ID }
  {? :stages(call=toInit) | left join %%stage s2 on %s.ID = %s2.COPY_RESULT_STAGE }
  {? :tournament(call=toInit) | left join %%tournament t on %s.TOURNAMENT_ID = %t.ID }
  {= where
    {& %s.ID ::= :id }
    {& %s.NAME ::= :name }
    {& %s.SEQUENCE ::= :sequence }
    {& %s.NUMBER_OF_HOCKEY ::= :numberOfHockey }
    {& %s.WIN_POINTS ::= :winPoints }
    {& %s.TYPE ::= :type }
    {& %s.TOURNAMENT_ID ::= :tournament.id }
    {& %s.STATUS ::= :status }
    {& %s.COPY_RESULT_STAGE ::= :copyResultStage.id }
  }
;

UPDATE_STAGE(CRUD,in=Stage,out=Stage,tab=stage)=
  update %%stage
  {= set
    { ,%NAME = :name(call=isDef) }
    { ,%SEQUENCE = :sequence(call=isDef) }
    { ,%NUMBER_OF_HOCKEY = :numberOfHockey(call=isDef) }
    { ,%WIN_POINTS = :winPoints(call=isDef) }
    { ,%TYPE = :type(call=isDef) }
    { ,%TOURNAMENT_ID = :tournament.id(call=isDef) }
    { ,%STATUS = :status(call=isDef) }
    { ,%COPY_RESULT_STAGE = :copyResultStage.id(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_STAGE(CRUD,in=Stage,out=Stage,tab=stage)=
  delete from %%stage
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_STAGE(QRY,in=Stage,out=Stage,tab=stage=s,tab=stage=s1,tab=groups=g,tab=playOffGame=p,tab=stage=s2,tab=tournament=t)=
  select {? :onlyIds_ | %s.ID @id(id) |
    %s.ID @id(id), %s.NAME @name, %s.SEQUENCE @sequence, %s.NUMBER_OF_HOCKEY @numberOfHockey, %s.WIN_POINTS @winPoints, %s.TYPE @type, %s.TOURNAMENT_ID @tournament.id(id), %s.STATUS @status, %s.COPY_RESULT_STAGE @copyResultStage.id(id)
    {? :copyResultStage(call=toInit) | , %s1.NAME @copyResultStage.name, %s1.SEQUENCE @copyResultStage.sequence, %s1.NUMBER_OF_HOCKEY @copyResultStage.numberOfHockey, %s1.WIN_POINTS @copyResultStage.winPoints, %s1.TYPE @copyResultStage.type, %s1.TOURNAMENT_ID @copyResultStage.tournament.id(id), %s1.STATUS @copyResultStage.status, %s1.COPY_RESULT_STAGE @copyResultStage.copyResultStage.id(id) }
    {? :groups(call=toInit) | , %g.ID @groups.id(id), %g.NAME @groups.name, %g.STAGE_ID @groups.stage.id }
    {? :playOffGames(call=toInit) | , %p.ID @playOffGames.id(id), %p.HOME_PARTICIPANT_ID @playOffGames.homeParticipant.id, %p.AWAY_PARTICIPANT_ID @playOffGames.awayParticipant.id, %p.STATUS @playOffGames.status, %p.RESULT @playOffGames.result(type=result), %p.STAGE_ID @playOffGames.stage.id, %p.POSITION @playOffGames.position }
    {? :stages(call=toInit) | , %s2.ID @stages.id(id), %s2.NAME @stages.name, %s2.SEQUENCE @stages.sequence, %s2.NUMBER_OF_HOCKEY @stages.numberOfHockey, %s2.WIN_POINTS @stages.winPoints, %s2.TYPE @stages.type, %s2.TOURNAMENT_ID @stages.tournament.id(id), %s2.STATUS @stages.status, %s2.COPY_RESULT_STAGE @stages.copyResultStage.id(id) }
    {? :tournament(call=toInit) | , %t.NAME @tournament.name, %t.STATUS @tournament.status, %t.PLAYING_FORMAT_ID @tournament.playingFormat.id, %t.COUNTRY @tournament.country, %t.CITY @tournament.city, %t.ADDRESS @tournament.address, %t.LOGO @tournament.logo, %t.REGISTRATION_FROM @tournament.registrationFrom, %t.DATE @tournament.date, %t.REGISTRATION_TO @tournament.registrationTo, %t.VISIBLE @tournament.visible }
  }
  from %%stage s
  {? :copyResultStage(call=toInit) | left join %%stage s1 on %s.COPY_RESULT_STAGE = %s1.ID }
  {? :groups(call=toInit) | left join %%groups g on %s.ID = %g.STAGE_ID }
  {? :playOffGames(call=toInit) | left join %%play_off_game p on %s.ID = %p.STAGE_ID }
  {? :stages(call=toInit) | left join %%stage s2 on %s.ID = %s2.COPY_RESULT_STAGE }
  {? :tournament(call=toInit) | left join %%tournament t on %s.TOURNAMENT_ID = %t.ID }
  {= where
    {& %s.ID ::= :id }
    {& UPPER(%s.NAME) like :+name }
    {& %s.SEQUENCE ::= :sequence }
    {& %s.NUMBER_OF_HOCKEY ::= :numberOfHockey }
    {& %s.WIN_POINTS ::= :winPoints }
    {& UPPER(%s.TYPE) like :+type }
    {& %s.TOURNAMENT_ID ::= :tournament.id }
    {& UPPER(%s.STATUS) like :+status }
    {& %s.COPY_RESULT_STAGE ::= :copyResultStage.id }
    {& %s.ID in :ids_ }
  }
  {#ID order by %s.ID }
  {#NAME order by %s.NAME }
  {#TOURNAMENT order by %s.TOURNAMENT_ID }
  {#COPY_RESULT_STAGE order by %s.COPY_RESULT_STAGE }
;

INSERT_TOURNAMENT(CRUD,in=Tournament,out=Tournament,tab=tournament)=
  insert into %%tournament (%ID, %NAME, %STATUS, %PLAYING_FORMAT_ID, %COUNTRY, %CITY, %ADDRESS, %LOGO, %REGISTRATION_FROM, %DATE, %REGISTRATION_TO, %VISIBLE)
  {= values (:id(seq=TOURNAMENT), :name, :status, :playingFormat.id, :country, :city, :address, :logo, :registrationFrom, :date, :registrationTo, :visible) }
;

GET_TOURNAMENT(CRUD,in=Tournament,out=Tournament,tab=tournament=t,tab=finalStanding=f,tab=playingFormat=p,tab=stage=s,tab=tournamentRating=t1)=
  select %t.ID @id(id), %t.NAME @name, %t.STATUS @status, %t.PLAYING_FORMAT_ID @playingFormat.id(id), %t.COUNTRY @country, %t.CITY @city, %t.ADDRESS @address, %t.LOGO @logo, %t.REGISTRATION_FROM @registrationFrom, %t.DATE @date, %t.REGISTRATION_TO @registrationTo, %t.VISIBLE @visible
         {? :finalStandings(call=toInit) | , %f.ID @finalStandings.id(id), %f.PLAYER_ID @finalStandings.player.id, %f.FINAL_RANK @finalStandings.finalRank, %f.TOURNAMENT_ID @finalStandings.tournament.id }
         {? :playingFormat(call=toInit) | , %p.NAME @playingFormat.name, %p.FINAL_PROMOTING @playingFormat.finalPromoting, %p.LOWER_PROMOTING @playingFormat.lowerPromoting, %p.WIN_POINTS @playingFormat.winPoints, %p.PLAY_OFF_FINAL @playingFormat.playOffFinal, %p.PLAY_OFF_LOWER @playingFormat.playOffLower, %p.MIN_PLAYERS_IN_GROUP @playingFormat.minPlayersInGroup, %p.SORT_TYPE @playingFormat.sortType, %p.DESCRIPTION @playingFormat.description }
         {? :stages(call=toInit) | , %s.ID @stages.id(id), %s.NAME @stages.name, %s.SEQUENCE @stages.sequence, %s.NUMBER_OF_HOCKEY @stages.numberOfHockey, %s.WIN_POINTS @stages.winPoints, %s.TYPE @stages.type, %s.TOURNAMENT_ID @stages.tournament.id, %s.STATUS @stages.status, %s.COPY_RESULT_STAGE @stages.copyResultStage.id }
         {? :tournamentRatings(call=toInit) | , %t1.ID @tournamentRatings.id(id), %t1.TOURNAMENT_ID @tournamentRatings.tournament.id, %t1.RATING_ID @tournamentRatings.rating.id }
  from %%tournament t
  {? :finalStandings(call=toInit) | left join %%final_standing f on %t.ID = %f.TOURNAMENT_ID }
  {? :playingFormat(call=toInit) | left join %%playing_format p on %t.PLAYING_FORMAT_ID = %p.ID }
  {? :stages(call=toInit) | left join %%stage s on %t.ID = %s.TOURNAMENT_ID }
  {? :tournamentRatings(call=toInit) | left join %%tournament_rating t1 on %t.ID = %t1.TOURNAMENT_ID }
  {= where
    {& %t.ID ::= :id }
    {& %t.NAME ::= :name }
    {& %t.STATUS ::= :status }
    {& %t.PLAYING_FORMAT_ID ::= :playingFormat.id }
    {& %t.COUNTRY ::= :country }
    {& %t.CITY ::= :city }
    {& %t.ADDRESS ::= :address }
    {& %t.LOGO ::= :logo }
    {& %t.REGISTRATION_FROM ::= :registrationFrom }
    {& %t.DATE ::= :date }
    {& %t.REGISTRATION_TO ::= :registrationTo }
    {& %t.VISIBLE ::= :visible }
  }
;

UPDATE_TOURNAMENT(CRUD,in=Tournament,out=Tournament,tab=tournament)=
  update %%tournament
  {= set
    { ,%NAME = :name(call=isDef) }
    { ,%STATUS = :status(call=isDef) }
    { ,%PLAYING_FORMAT_ID = :playingFormat.id(call=isDef) }
    { ,%COUNTRY = :country(call=isDef) }
    { ,%CITY = :city(call=isDef) }
    { ,%ADDRESS = :address(call=isDef) }
    { ,%LOGO = :logo(call=isDef) }
    { ,%REGISTRATION_FROM = :registrationFrom(call=isDef) }
    { ,%DATE = :date(call=isDef) }
    { ,%REGISTRATION_TO = :registrationTo(call=isDef) }
    { ,%VISIBLE = :visible(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_TOURNAMENT(CRUD,in=Tournament,out=Tournament,tab=tournament)=
  delete from %%tournament
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_TOURNAMENT(QRY,in=Tournament,out=Tournament,tab=tournament=t,tab=finalStanding=f,tab=playingFormat=p,tab=stage=s,tab=tournamentRating=t1)=
  select {? :onlyIds_ | %t.ID @id(id) |
    %t.ID @id(id), %t.NAME @name, %t.STATUS @status, %t.PLAYING_FORMAT_ID @playingFormat.id(id), %t.COUNTRY @country, %t.CITY @city, %t.ADDRESS @address, %t.LOGO @logo, %t.REGISTRATION_FROM @registrationFrom, %t.DATE @date, %t.REGISTRATION_TO @registrationTo, %t.VISIBLE @visible
    {? :finalStandings(call=toInit) | , %f.ID @finalStandings.id(id), %f.PLAYER_ID @finalStandings.player.id, %f.FINAL_RANK @finalStandings.finalRank, %f.TOURNAMENT_ID @finalStandings.tournament.id }
    {? :playingFormat(call=toInit) | , %p.NAME @playingFormat.name, %p.FINAL_PROMOTING @playingFormat.finalPromoting, %p.LOWER_PROMOTING @playingFormat.lowerPromoting, %p.WIN_POINTS @playingFormat.winPoints, %p.PLAY_OFF_FINAL @playingFormat.playOffFinal, %p.PLAY_OFF_LOWER @playingFormat.playOffLower, %p.MIN_PLAYERS_IN_GROUP @playingFormat.minPlayersInGroup, %p.SORT_TYPE @playingFormat.sortType, %p.DESCRIPTION @playingFormat.description }
    {? :stages(call=toInit) | , %s.ID @stages.id(id), %s.NAME @stages.name, %s.SEQUENCE @stages.sequence, %s.NUMBER_OF_HOCKEY @stages.numberOfHockey, %s.WIN_POINTS @stages.winPoints, %s.TYPE @stages.type, %s.TOURNAMENT_ID @stages.tournament.id, %s.STATUS @stages.status, %s.COPY_RESULT_STAGE @stages.copyResultStage.id }
    {? :tournamentRatings(call=toInit) | , %t1.ID @tournamentRatings.id(id), %t1.TOURNAMENT_ID @tournamentRatings.tournament.id, %t1.RATING_ID @tournamentRatings.rating.id }
  }
  from %%tournament t
  {? :finalStandings(call=toInit) | left join %%final_standing f on %t.ID = %f.TOURNAMENT_ID }
  {? :playingFormat(call=toInit) | left join %%playing_format p on %t.PLAYING_FORMAT_ID = %p.ID }
  {? :stages(call=toInit) | left join %%stage s on %t.ID = %s.TOURNAMENT_ID }
  {? :tournamentRatings(call=toInit) | left join %%tournament_rating t1 on %t.ID = %t1.TOURNAMENT_ID }
  {= where
    {& %t.ID ::= :id }
    {& UPPER(%t.NAME) like :+name }
    {& UPPER(%t.STATUS) like :+status }
    {& %t.PLAYING_FORMAT_ID ::= :playingFormat.id }
    {& UPPER(%t.COUNTRY) like :+country }
    {& UPPER(%t.CITY) like :+city }
    {& UPPER(%t.ADDRESS) like :+address }
    {& %t.LOGO ::= :logo }
    {& %t.REGISTRATION_FROM ::= :registrationFrom }
    {& %t.DATE ::= :date }
    {& %t.REGISTRATION_TO ::= :registrationTo }
    {& %t.VISIBLE ::= :visible }
    {& %t.ID in :ids_ }
  }
  {#ID order by %t.ID }
  {#PLAYING_FORMAT order by %t.PLAYING_FORMAT_ID }
;

INSERT_TOURNAMENT_ADMIN(CRUD,in=TournamentAdmin,out=TournamentAdmin,tab=tournamentAdmin)=
  insert into %%tournament_admin (%ID, %TOURNAMENT_ID, %USER_ID)
  {= values (:id(seq=TOURNAMENT_ADMIN), :tournamentId, :userId) }
;

GET_TOURNAMENT_ADMIN(CRUD,in=TournamentAdmin,out=TournamentAdmin,tab=tournamentAdmin)=
  select %ID @id(id), %TOURNAMENT_ID @tournamentId, %USER_ID @userId
  from %%tournament_admin
  {= where
    {& %ID ::= :id }
    {& %TOURNAMENT_ID ::= :tournamentId }
    {& %USER_ID ::= :userId }
  }
;

UPDATE_TOURNAMENT_ADMIN(CRUD,in=TournamentAdmin,out=TournamentAdmin,tab=tournamentAdmin)=
  update %%tournament_admin
  {= set
    { ,%TOURNAMENT_ID = :tournamentId }
    { ,%USER_ID = :userId }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_TOURNAMENT_ADMIN(CRUD,in=TournamentAdmin,out=TournamentAdmin,tab=tournamentAdmin)=
  delete from %%tournament_admin
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_TOURNAMENT_ADMIN(QRY,in=TournamentAdmin,out=TournamentAdmin,tab=tournamentAdmin)=
  select {? :onlyIds_ | %ID @id(id) |
    %ID @id(id), %TOURNAMENT_ID @tournamentId, %USER_ID @userId
  }
  from %%tournament_admin
  {= where
    {& %ID ::= :id }
    {& %TOURNAMENT_ID ::= :tournamentId }
    {& %USER_ID ::= :userId }
    {& %ID in :ids_ }
  }
  {#ID order by %ID }
  {#TOURNAMENT_ID order by %TOURNAMENT_ID }
  {#USER_ID order by %USER_ID }
;

INSERT_TOURNAMENT_RATING(CRUD,in=TournamentRating,out=TournamentRating,tab=tournamentRating)=
  insert into %%tournament_rating (%ID, %TOURNAMENT_ID, %RATING_ID)
  {= values (:id(seq=TOURNAMENT_RATING), :tournament.id, :rating.id) }
;

GET_TOURNAMENT_RATING(CRUD,in=TournamentRating,out=TournamentRating,tab=tournamentRating=t,tab=rating=r,tab=tournament=t1)=
  select %t.ID @id(id), %t.TOURNAMENT_ID @tournament.id(id), %t.RATING_ID @rating.id(id)
         {? :rating(call=toInit) | , %r.NAME @rating.name, %r.RATING_POINTS_ID @rating.ratingPoints.id }
         {? :tournament(call=toInit) | , %t1.NAME @tournament.name, %t1.STATUS @tournament.status, %t1.PLAYING_FORMAT_ID @tournament.playingFormat.id, %t1.COUNTRY @tournament.country, %t1.CITY @tournament.city, %t1.ADDRESS @tournament.address, %t1.LOGO @tournament.logo, %t1.REGISTRATION_FROM @tournament.registrationFrom, %t1.DATE @tournament.date, %t1.REGISTRATION_TO @tournament.registrationTo, %t1.VISIBLE @tournament.visible }
  from %%tournament_rating t
  {? :rating(call=toInit) | left join %%rating r on %t.RATING_ID = %r.ID }
  {? :tournament(call=toInit) | left join %%tournament t1 on %t.TOURNAMENT_ID = %t1.ID }
  {= where
    {& %t.ID ::= :id }
    {& %t.TOURNAMENT_ID ::= :tournament.id }
    {& %t.RATING_ID ::= :rating.id }
  }
;

UPDATE_TOURNAMENT_RATING(CRUD,in=TournamentRating,out=TournamentRating,tab=tournamentRating)=
  update %%tournament_rating
  {= set
    { ,%TOURNAMENT_ID = :tournament.id }
    { ,%RATING_ID = :rating.id }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_TOURNAMENT_RATING(CRUD,in=TournamentRating,out=TournamentRating,tab=tournamentRating)=
  delete from %%tournament_rating
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_TOURNAMENT_RATING(QRY,in=TournamentRating,out=TournamentRating,tab=tournamentRating=t,tab=rating=r,tab=tournament=t1)=
  select {? :onlyIds_ | %t.ID @id(id) |
    %t.ID @id(id), %t.TOURNAMENT_ID @tournament.id(id), %t.RATING_ID @rating.id(id)
    {? :rating(call=toInit) | , %r.NAME @rating.name, %r.RATING_POINTS_ID @rating.ratingPoints.id }
    {? :tournament(call=toInit) | , %t1.NAME @tournament.name, %t1.STATUS @tournament.status, %t1.PLAYING_FORMAT_ID @tournament.playingFormat.id, %t1.COUNTRY @tournament.country, %t1.CITY @tournament.city, %t1.ADDRESS @tournament.address, %t1.LOGO @tournament.logo, %t1.REGISTRATION_FROM @tournament.registrationFrom, %t1.DATE @tournament.date, %t1.REGISTRATION_TO @tournament.registrationTo, %t1.VISIBLE @tournament.visible }
  }
  from %%tournament_rating t
  {? :rating(call=toInit) | left join %%rating r on %t.RATING_ID = %r.ID }
  {? :tournament(call=toInit) | left join %%tournament t1 on %t.TOURNAMENT_ID = %t1.ID }
  {= where
    {& %t.ID ::= :id }
    {& %t.TOURNAMENT_ID ::= :tournament.id }
    {& %t.RATING_ID ::= :rating.id }
    {& %t.ID in :ids_ }
  }
  {#ID order by %t.ID }
  {#TOURNAMENT order by %t.TOURNAMENT_ID }
  {#RATING order by %t.RATING_ID }
;

INSERT_USER(CRUD,in=User,out=User,tab=user)=
  insert into %%user (%PLAYER_ID, %EMAIL, %LOGIN, %PASSWORD, %PHONE, %ROLE, %VALIDITY)
  {= values (:player.id(seq=USER), :email, :login, :password, :phone, :role, :validity) }
;

GET_USER(CRUD,in=User,out=User,tab=user=u,tab=player=p)=
  select %u.PLAYER_ID @player.id(id), %u.EMAIL @email, %u.LOGIN @login, %u.PASSWORD @password, %u.PHONE @phone, %u.ROLE @role, %u.VALIDITY @validity
         {? :player(call=toInit) | , %p.NAME @player.name, %p.SURNAME @player.surname(type=surname), %p.NICKNAME @player.nickname, %p.GENDER @player.gender, %p.DATE_OF_BIRTH @player.dateOfBirth, %p.COUNTRY @player.country, %p.CITY @player.city, %p.CLUB @player.club, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId, %p.NAME_ASCII @player.nameAscii, %p.SURNAME_ASCII @player.surnameAscii, %p.VERIFICATION @player.verification }
  from %%user u
  {? :player(call=toInit) | left join %%player p on %u.PLAYER_ID = %p.ID }
  {= where
    {& %u.PLAYER_ID ::= :player.id }
    {& %u.EMAIL ::= :email }
    {& %u.LOGIN ::= :login }
    {& %u.PASSWORD ::= :password }
    {& %u.PHONE ::= :phone }
    {& %u.ROLE ::= :role }
    {& %u.VALIDITY ::= :validity }
  }
;

UPDATE_USER(CRUD,in=User,out=User,tab=user)=
  update %%user
  {= set
    { ,%EMAIL = :email(call=isDef) }
    { ,%LOGIN = :login(call=isDef) }
    { ,%PASSWORD = :password(call=isDef) }
    { ,%PHONE = :phone(call=isDef) }
    { ,%ROLE = :role(call=isDef) }
    { ,%VALIDITY = :validity(call=isDef) }
  }
  {= where
    {& %PLAYER_ID = :player.id(!empty) }
  }
;

DELETE_USER(CRUD,in=User,out=User,tab=user)=
  delete from %%user
  {= where
    {& %PLAYER_ID = :player.id(!empty) }
  }
;

SELECT_USER(QRY,in=User,out=User,tab=user=u,tab=player=p)=
  select {? :onlyIds_ | %u.PLAYER_ID @id(id) |
    %u.PLAYER_ID @player.id(id), %u.EMAIL @email, %u.LOGIN @login, %u.PASSWORD @password, %u.PHONE @phone, %u.ROLE @role, %u.VALIDITY @validity
    {? :player(call=toInit) | , %p.NAME @player.name, %p.SURNAME @player.surname(type=surname), %p.NICKNAME @player.nickname, %p.GENDER @player.gender, %p.DATE_OF_BIRTH @player.dateOfBirth, %p.COUNTRY @player.country, %p.CITY @player.city, %p.CLUB @player.club, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId, %p.NAME_ASCII @player.nameAscii, %p.SURNAME_ASCII @player.surnameAscii, %p.VERIFICATION @player.verification }
  }
  from %%user u
  {? :player(call=toInit) | left join %%player p on %u.PLAYER_ID = %p.ID }
  {= where
    {& %u.PLAYER_ID ::= :player.id }
    {& UPPER(%u.EMAIL) like :+email }
    {& UPPER(%u.LOGIN) like :+login }
    {& UPPER(%u.PASSWORD) like :+password }
    {& UPPER(%u.PHONE) like :+phone }
    {& UPPER(%u.ROLE) like :+role }
    {& %u.VALIDITY ::= :validity }
    {& %u.PLAYER_ID in :ids_ }
  }
  {#PLAYER order by %u.PLAYER_ID }
  {#EMAIL order by %u.EMAIL }
  {#LOGIN order by %u.LOGIN }
;

// Model statistics
// Tables=15
// Columns=99
// Primary Keys=15
// Exports=20
// Imports=20
// Indexes=43
// Check Constraints=42
// Procedures=0
// Procedures Columns=0
// Functions=0
// Functions Columns=0


